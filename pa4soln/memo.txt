
1. The most difficult part of this project for me was on part two.  I think the reason I found it
so difficult was the learning curve of juggling all the methods needed to access information in the map 
through the iterator provided by calls to adj(). Once I overcame that, the other parts were easy enough,
requiring the same skillset as part 2.

2. The problem with the naive solution of step three is that it fails to take into account the time
associated with the path it calculates, each vertex being of equal value.  This solution can suggest 
paths requiring far more time because they take fewer stops. We saw that it produced a route
using the slow Silver Line where a route using the much faster trains was possible.

3. The load-graph code in MetroGraph reads the input file first to get the number of vertices needed
to create the Graph, and then again to get the number of elements needed in the Platform and Station arrays.
To prevent two readings, we would need to save the file information in memory, say in a List of Strings, 
and then, knowing the number, create the arrays, and process the list elements.the edge information. 
The Graph API does not allow us to add vertices to a growing graph, so this is a sensible approach. 
The book examples expect the file to have the number of vertices at the start of the file, but this is not 
provided here.

4. A weighted graph of stations would have no way to cost a transfer at a station. Even if we added a 
self-loop, the BFS would just not choose it.

5. The train line color is computed by extracting the first three characters from the train line name.
This works for the names we have, but could break down when new lines are added. With name "Y", 
we would try to extract 3 chars but there's only one there, causing an IndexOurOfBoundsException.
